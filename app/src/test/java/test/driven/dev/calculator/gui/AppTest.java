/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test.driven.dev.calculator.gui;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;


class AppTest {

    Calc calculator = new Calc();
    @Test
    void HasAdd() {
        assertEquals(5, calculator.processInput("2 + 3"));
    }

    @Test
    void HasSubtract() {
        assertEquals(2, calculator.processInput("4 - 2"));
    }

    @Test
    void HasMultiply() {
        assertEquals(6, calculator.processInput("3 * 2"));
    }

    @Test
    void testDivide() {
        assertEquals(2, calculator.processInput("10 / 5"));
    }

//     @Test
//     void testPower() {
//         Calc calculator = new Calc();
//         Operator op = Operator.POWER;
//         assertEquals(8, calculator.applyOp(2, op, 3));
//     }

//     @Test
//     void testSquareRoot() {
//         Calc calculator = new Calc();
//         Operator op = Operator.SQUARE_ROOT;
//         assertEquals(2, calculator.applyOp(4, op, 0));
//     }

//     @Test
//     void testLogarithm() {
//         Calc calculator = new Calc();
//         Operator op = Operator.LOGARITHM;
//         assertEquals(2, calculator.applyOp(100, op, 10));
//     }

//     @Test
//     void testSine() {
//         Calc calculator = new Calc();
//         Operator op = Operator.SINE;
//         assertEquals(1, calculator.applyOp(90, op, 0));
//     }

//     @Test
//     void testCosine() {
//         Calc calculator = new Calc();
//         Operator op = Operator.COSINE;
//         assertEquals(0, calculator.applyOp(90, op, 0));
//     }

//     @Test
//     void testTangent() {
//         Calc calculator = new Calc();
//         Operator op = Operator.TANGENT;
//         assertEquals(1, calculator.applyOp(45, op, 0));
//     }

//     @Test
//     void testInverseSine() {
//         Calc calculator = new Calc();
//         Operator op = Operator.INVERSE_SINE;
//         assertEquals(90, calculator.applyOp(1, op, 0));
//     }

//     @Test
//     void testInverseCosine() {
//         Calc calculator = new Calc();
//         Operator op = Operator.INVERSE_COSINE;
//         assertEquals(90, calculator.applyOp(0, op, 0));
//     }

//     @Test
//     void testInverseTangent() {
//         Calc calculator = new Calc();
//         Operator op = Operator.INVERSE_TANGENT;
//         assertEquals(45, calculator.applyOp(1, op, 0));
//     }

//     @Test
//     void testFactorial() {
//         Calc calculator = new Calc();
//         Operator op = Operator.FACTORIAL;
//         assertEquals(120, calculator.applyOp(5, op, 0));
//     }

//     @Test
//     void testModulus() {
//         Calc calculator = new Calc();
//         Operator op = Operator.MODULUS;
//         assertEquals(1, calculator.applyOp(5, op, 2));
//     }

//     @Test
//     void testAbsolute() {
//         Calc calculator = new Calc();
//         Operator op = Operator.ABSOLUTE;
//         assertEquals(5, calculator.applyOp(-5, op, 0));
//     }

//     @Test
//     void testMaximum() {
//         Calc calculator = new Calc();
//         Operator op = Operator.MAX;
//         assertEquals(5, calculator.applyOp(2, op, 5));
//     }

//     @Test
//     void testMinimum() {
//         Calc calculator = new Calc();
//         Operator op = Operator.MIN;
//         assertEquals(2, calculator.applyOp(2, op, 5));
//     }

//   /*  @Test
//     void testAverage() {
//         Calc calculator = new Calc();
//         Operator op = Operator.AVERAGE;
//         assertEquals(3, calculator.applyOp(2, op, 3, 4));
//     }
// */
//   /*  @Test
//     void testSum() {
//         Calc calculator = new Calc();
//         Operator op = Operator.SUM;
//         assertEquals(9, calculator.applyOp(2, op, 3, 4));
//     }*/ 

    
}
